generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    password      String? // Add this
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    userId      String
    name        String
    email       String
    companyName String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Invoice     Invoice[]

    @@unique([userId, email])
}

model Invoice {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    clientId  String        @db.ObjectId
    client    Client        @relation(fields: [clientId], references: [id])
    dueDate   DateTime
    total     Float
    status    InvoiceStatus @default(PENDING)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

enum InvoiceStatus {
    PENDING
    PAID
    OVERDUE
}
