generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    email              String?   @unique
    password           String? // Add this
    emailVerified      DateTime?
    image              String?
    brandName          String?
    brandEmail         String?
    brandAddress       String?
    note               String?
    terms              String?
    selectedTemplateId String?
    accounts           Account[]
    invoices           Invoice[]
    sessions           Session[]
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    Payment            Payment[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    name      String
    email     String
    address   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    invoices  Invoice[]

    @@unique([userId, email])
}

model Invoice {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    userId        String
    invoiceNumber String        @unique
    clientId      String        @db.ObjectId
    client        Client        @relation(fields: [clientId], references: [id])
    subTotal      Float         @default(0)
    tax           Float         @default(0)
    discount      Float         @default(0)
    totalAmount   Float         @default(0)
    paidAmount    Float         @default(0)
    dueAmount     Float         @default(0)
    issueDate     DateTime      @default(now())
    dueDate       DateTime
    status        InvoiceStatus @default(PENDING)
    items         InvoiceItem[]
    payments      Payment[]
    notes         String?
    terms         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    user          User          @relation(fields: [userId], references: [id])
}

enum InvoiceStatus {
    DRAFT
    PENDING
    PARTIALLY_PAID
    PAID
    OVERDUE
    CANCELLED
}

model InvoiceItem {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    invoiceId   String   @db.ObjectId
    invoice     Invoice  @relation(fields: [invoiceId], references: [id])
    name        String
    description String?
    quantity    Int      @default(1)
    price       Float
    totalPrice  Float
    createdAt   DateTime @default(now())
}

model Payment {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    userId          String
    user            User     @relation(fields: [userId], references: [id])
    invoiceId       String   @unique
    invoice         Invoice  @relation(fields: [invoiceId], references: [id])
    stripeSessionId String?
    amount          Int
    status          String
    metadata        Json?
    createdAt       DateTime @default(now())
}
